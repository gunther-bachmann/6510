#+title: MIL
/ideas and plans on how and what to implement as minimal lisp/

* minimal lisp with (reduced) racket
this is a minimal lisp implementation that makes use of a reduced set of racket features in order to be somewhat portable to the minimal
lisp itself
** core features of mil
*** constants
** driving samples
*** constant definitions, atoms
#+begin_src lisp
  (def letterA #\A)
  (def stringABC "ABC")
  (def eightBitNumber #x20)
  (def sexteenBitNumber #xFFD2)
  (def floatNumber 1.23e5)
  (def symbol 'aSymbol)
  (def emptyList '())
  (def true #t)
  (def false #f)
#+end_src
*** quote, quasiquote, list
- '() is shorthand for (list)
- 'some is shorthand for (quote some)
- `(,some) is shorthand for (quasiquote (list (unquote some)))
#+begin_src lisp
  (list) => '()
  (list some) => '(some)
  (quote some) => 'some
  (quote (list)) => '(list)
  (quote ()) => '()
  (quasiquote (list (unqote other))) => `(,other)
#+end_src
*** splice operator
#+begin_src lisp
  (def aList (list a b c))
  (def bList (@aList d e f)) => (a b c d e f)

  (def aMap (map a va b vb c vc))
  (def bMap (map @aMap c oc d vd e ve)) => (map a va b vb c oc d vd e ve)

  (def aArray (array a b c))
  (def bArray (array @aArray d e f)) => (array a b c d e f)

  (def aStruct (struct idA #:fieldA valueFieldA #:fieldB valueFieldB))
  (def bStruct (struct idB @aStruct #:fieldC valueFieldC #:fieldD valueFieldD))
#+end_src
*** orthogonal concepts
all defaults to immutable data
list, map, array and struct can be converted into another.
list: variable length o(1) to prepend a value (mutable)
map: variable length o(1) to read by key
struct: fixed length o(1) to read by key and write by key (mutable)
array: fixed length o(1) to read by index and write by index (mutable)
- a struct is a map of fields -> values
- a struct is a list of fieldId value ...
- an array is a list (of fixed len)
- a map is a list of key value ...
*** function definition
only tailcall recursion allowed (no check, yet)
#+begin_src lisp
  (def fn (lambda ([param1 typeA] [param2 typeB]) (fn param1 param2)))
#+end_src
*** let, let*
#+begin_src lisp
  (let ((nameA valueA)
        (nameB valueB))
    (useNameA nameA nameB))
#+end_src
#+begin_src lisp
  (let* ((nameA valueA)
         (nameB (fn valueA)))
    (fn nameA nameB))
#+end_src
*** if [when, unless]
#+begin_src lisp
  (if booleanExpr
      (fnA)
      (fnB))
#+end_src
*** mutable value (ideas)
#+begin_src lisp
  (mutable-byte #x00 byteId)
  (mutate:= byteId #x20)
  (mitable-word #xc000 wordId)
  (mutate:= wordId #xFFD2)
#+end_src
*** types
#+begin_src lisp
  (deftype id (sumtype a b c)) ;; a x b x c
  (deftype id (uniontype a b c)) ;; a | b | c
  void ;;
  any  ;; is subtype of all types
  none ;; is supertype of all types
#+end_src
*** structures
#+begin_src lisp
  (defstruct id
    field1
    field2)
#+end_src
*** lists, arrays, maps
#+begin_src lisp
  (def aList (a b c))
  (def aHash {a: valueA b: valueB c: valueC})
  (def anArray [a b c d])
#+end_src
** plan
- [-] define scheme-syntax for mil (concepts), e.g. use ~mil-~â€‹prefix ast
  - overview
    #+begin_src racket
      (mil-module
       modname
       (mil-import ...)
       (mil-export ...)

       (mil-definition
        'age-comment (list (mil-parameter 'age))
        "return a comment about your age"
        (mil-if (mil-l (mil-symbol '>) (mil-symbol 'age) (mil-uint8 17))
                (mil-string "erwachsen")
                (mil-string "kind"))))
    #+end_src
  - byte arithmetic
    #+begin_src lisp
      ;; integer arithmetic
      (mil-+ op1 op2 ... op-m)

      ;; mil--
    #+end_src
  - logical operators
    #+begin_src lisp
      ;; mil-or
      ;; mil-and
      ;; not
    #+end_src
  - binary bit operators
    #+begin_src lisp
    #+end_src
- [X] define interpreter for mil scheme-syntax ast
- [ ] define compiler mil scheme ast -> c64 assembler
  - expression stack?
  - implement most simple function
    function no parameter returning atomic value
  - function call = expression reduction
  - variable / function - lookup / environment
  - memory layout for normal forms (list, cons + atomic values),
    special forms are translated into code
    table of strings (ptr - >str)
    table of symbols (ptr/id -> symbol string)
    function table (ptr/id -> function code)

- [ ] define parser for actual syntax
- [ ] define translation: parsed -> mil ast
** mil-ast -> c64
*** simple function
#+begin_src racket
  (mil-definition
   'const-a
   '()
   "constant a = 42"
   (mil-uint8 42))

  (mil-l (mil-symbol 'display) (mil-symbol 'const-a)) ;; print const-a
#+end_src
#+begin_src asm
                  ; put uint8 42 on expression stack, register A destroyed, probably some flags, too
  const-a:        lda #42
                  jmp PUT_MIL_CONST_ON_EXPR_STACK

  main:           jsr const-a ; eager eval of parameters
                  jsr DISPLAY ; runtime library to display last object(s) on the expression stack
#+end_src
*** value (expression) stack
- tos = ptr to top element of the stack
- tos = atomic value or string
- data representation [not optimized, simple]
  - e.g.
    - bool/char/byte value: [type-byte][value] (in sum 16 bits)
    - string value: [type-string][string-id] (in sum 16 bits), id into string table
    - cons-cell(list): [type-cons-cell][a][b]  (in sum 8 bit + len(a) + len(b))
      - a, b can be a bool/char/byte/string value or a cell-ptr
      - cell-ptr: [type-cell-pointer][low][high] (in sum 24 bits, with 16 bit ptr to next cell)
      - nil-cell-ptr: [type-nil-cell-pointer] (in sum 8 bit)
- value list construction (e.g. '(a b c)):
  - push nil-cell-ptr  on the expression stack [expression stack: [nil-cell-ptr]]
  - push value c on expression stack [expression stack: [c][nil-cell-ptr]]
  - call cons (replacing tos and tos-1 with cell-ptr to cons-cell [c][nil-cell-ptr])
  - push value b on expression stack
  - call cons (replacing tos and tos-1 with cell-ptr to cons-cell [b][cell-ptr, pointing to [c][nil-cell-ptr]] )
  - push value a on expression stack
  - call cons  (replacing tos and tos-1 with cell-ptr to cons-cell [a][cell-ptr, pointing to [b][cell-ptr, pointing to [c][nil-cell-ptr]]])
*** runtime methods for value stack
- push atomic value on the stack
- push nil-cell-ptr
- cons tos with tos-1
- (store tos-loc (for cleanup after function-call))?

*** memory layout for value stack
stack of pointers (e.g. just 256 bytes = 128 values)
| cell0     | cell1     | ... | cell n-1   | cell n   |
|-----------+-----------+-----+------------+----------|
| ptr->tos0 | ptr->tos1 | ... | ptr->tos-1 | ptr->tos |

heap of values pointed to by value stack (pointers)
| ptr        | *value stack heap* | size                    | layout                                                              |
|------------+------------------+-------------------------+---------------------------------------------------------------------|
| ptr->tos   | (list a b c)     | 4 +len(a)+len(b)+len(c) | [type-cons-cell[a][type-cons-cell[b][type cons-cell[c][nil-cell]]]] |
| ptr->tos-1 | byte #$42        | 2                       | [type-byte-const][$42]                                              |
| ...        |                  |                         |                                                                     |

- pop on the stack means:
  - cell-n is dropped,
  - data ptr->tos points to is free again
  - new value stack allocation starts at ptr->tos
  => for allocation, the next free value stack heap location needs to be kept somewhere (or can be calculated)
