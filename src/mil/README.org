#+title: MIL
/ideas and plans on how and what to implement as minimal lisp/

- references
  - 6502 lisp compile :: https://github.com/jaoswald/cl-comfy-6502/tree/master
  - language implemented on the 6502 :: https://dwheeler.com/6502/
  - SICL, a new CL implementation :: https://github.com/robert-strandh/SICL
  - http://codebase64.org/doku.php?id=start
  - http://sta.c64.org/cbm64krnfunc.html
  - http://wilsonminesco.com/6502interrupts/
  - http://www.6502.org/tutorials/compare_beyond.html#2.1
  - http://www.6502.org/tutorials/decimal_mode.html
  - http://www.6502.org/tutorials/decimal_mode.html#A
  - http://www.ffd2.com/fridge/docs/c64-diss.html
  - http://www.lunix.c64.org/
  - https://archive.org/details/commodore_c64_books
  - https://atariwiki.org/wiki/Wiki.jsp?page=Lisp
  - https://beebwiki.mdfs.net/Number_output_in_6502_machine_code#Print_8-bit_decimal
  - https://celso.io/retrocomputing/2019/12/23/c64-assembly
  - https://github.com/davidgiven/cpm65
  - https://sta.c64.org/cbm64mem.html
  - https://www.c64-wiki.com/wiki/BASIC-ROM
  - https://www.codebase64.org/doku.php?id=base:6502_6510_maths
  - https://www.pagetable.com/?p=793
  - Description of Opcodes, Memory, ROM https://www.pagetable.com/c64ref/6502/?tab=0
  - Floats for c64 https://www.c64-wiki.com/wiki/Floating_point_arithmetic
  - Minimal scheme implementation with VM https://github.com/udem-dlteam/ribbit
  - ulisp (lisp running on micro controllers) http://www.ulisp.com/
  - lelisp (z80 lisp) https://www.softwarepreservation.org/projects/LISP/le_lisp/source/lelisp12
  - move memory http://www.6502.org/source/general/memory_move.html
  - general routines :: http://www.6502.org/source/
  - graphics registers https://cbm8bit.blogspot.com/2018/07/vic-ii-on-c64.html
  - compile lisp to x86 :: https://bernsteinbear.com/blog/compiling-a-lisp-0/
  - doc collection :: https://bernsteinbear.com/pl-resources/
  - racket macros :: https://www-old.cs.utah.edu/plt/scope-sets/
  - scheme bibliography :: https://github.com/schemedoc/bibliography/blob/master/page3.md
  - racket features :: https://nikhilism.com/post/2023/racket-beyond-languages/
  - c64 assembler :: https://www.pagetable.com/?p=1542
  - c64 6502 optimizations :: https://dwheeler.com/6502/a-lang.txt
* example program execution
- program is loaded to 0800..XXXX (regular basic program load "*",8) and run (executes sys 2064)
- initialize runtime
  - (allocate page for strings/symbols, copy string and symbols int that page)
  - initialize expression stack (native array of cells), and stack pointer to tos
  - initialize heap (free lists etc.)
- initialize interpreter
  - vm-pc (ptr to current byte-code instruction)
  - allocate page for vm-callstack
  - execute vm instruction
* working draft
** memory management
*** pages
**** general layout
pages are 256 byte chunks, addressed through the page-id which is the high-byte of the absolute ptr.
pages allocated have the guarantee to not being moved => page-id will always be the high byte
* MMU idea
6510 Ax = address line of processor (0..15)
MR1Ax = address line of page mapping ram 1 (256 byte addressable) (0..7)
MR2Ax = address line of page mapping ram 2 (256 byte addressable) (0..7)
MMAx = address line of (complete) main memory (16MB addressable) (0..23)

mapped mode
6510           MR1/2          MM         6510
A8-15 -> MR1A0-7: D0-7 -> MMA16-23:
      -> MR2A0-7: D0-7 -> MMA8-15 :  <-> D0-7
A0-7                   -> MMA0-7  :

MR1-mode (set/read page configuration of register 1)
6510              MR1        6510
A8-15 = CR1
A0-7          -> MR1A0-7:  <-> D0-7

CR1 = bit pattern of where MR1 ram (256 byte) should be mapped into real memory

MR2-mode (set/read page configuration of register 1)
6510              MR2        6510
A8-15 = CR2
A0-7          -> MR2A0-7:  <-> D0-7

CR2 = bit pattern of where MR2 ram (256 byte) should be mapped into real memory

Dxxx = CR1
Dxxy = CR2
Dxxz = 0000 00LP = L=1 meaning MR1 mode, P=1 meaning MR2 mode (0 meaning it is not mapped)


- map main page 0010 1101 1001 0110 [0000 0000] -> into 6510 address 0100 1000 [0000 0000] means
    MR1[0100 1000] = 0010 1101
    MR2[0100 1000] = 1001 0110
- changing that mapping (e.g) 0010 1101 1000 0000 [0000 0000] -> 0100 1000 [0000 0000] means
    MR2[0100 1000] = 1000 0000

mapping this also means that references need to be taken care of (references [from other places in memory] into that page will suddenly
point to other physical memory and thus data). the program/os needs to be aware of that and make sure that no references to the old page
(data) are not used until the old/right page is restored to that native position.

* misc additional routines
** times 10 (decimal)
#+begin_src asm
  mul10:  PHA; save an in the stack
          ASL; multiply a by 8 shifting 3 times to the left
          ASL
          ASL
          STA temp; save an*8 in temp
          PLA; recover old A value from the stack
          ASL; multiply by 2 shiftings once to the left
          CLC ; clear carry
          ADC temp; add an*8 to a*2 to get a*10
          RTS ; return
#+end_src
* virtual (stack) machine
** interpreter loop
- each instruction is 1 byte, except pushes, which push a cell (e.g. 1xxx xxxx = push, with x being the first byte of the cell, 0yyy yyyy
  regular byte instruction like call, pop, branch etc.)
- there is a jump table (vm-instruction -> jump location = 1/2 page, depending on how many different instructions are necessary)
- decode instruction, increment vm-pc -
  - decode = lsl, read address from jump location, jsr to instruction interpretation
** operations
- see [[https://en.wikipedia.org/wiki/SECD_machine][SECD machine]], [[https://rachel.cafe/2021/12/10/secd.html][descibed with haskell]], [[https://github.com/zachallaun/secd][implemented in clojure]], or [[https://pqnelson.github.io/org-notes/comp-sci/abstract-machines/secd.html#h-d00204c5-0ff0-4e26-9ba0-5881aeb4e634][here]]
- writing an interpreter of the cesk machine https://matt.might.net/articles/cesk-machines/, https://matt.might.net/articles/oo-cesk/, https://matt.might.net/articles/cesk-machines/
- 
*** push cell (float, string, char, boolean, byte, int, symbol)
*** push n-array, struct, cons-cell (list)
*** plus, minus (byte/integer/float)
pop tos into A
replace tos with A +/- tos
*** shift left/right (byte/integer)
*** times, divide (int, too?), power, sqrt, log (float)
tos = cell, ptr to float
=> pop tos, transfer pointed to float into FAC (decrement ref count)
=> repl tos with result of, tranferd pointed to float to FAC2 (decrement ref count), execute * / ^ sqrt log, write result into FLOAT HEAP
(increment ref count)
*** peek, poke
- peek
  pop cell (byte) into zp-reg
  pop cell (byte) into zp-reg+1
  load (zp-reg),0
  push cell (byte)
- poke
  pop cell (byte) into zp-reg
  pop cell (byte) into zp-reg+1
  pop cell (byte) into A
  store (zp-reg),0
*** pop, duplicate, swap
*** branch-if, jump, call, return
*** cons, car, cdr
*** empty?, list?, atom?
*** not, and, or, xor
*** b-not, b-and, b-or, b-xor
*** get-field, set-field, copy (struct)
** examples
- adding to integers
  push int-a
  push int-b
  plus
- adding an integer to a list
  push list-a
  push an-int
  cons
- implementation of reverse (incomplete). is a list always a pair (cons-cell) or is nil a single cell?
  pair (or cons-cell) = [[cell][cell]​]
  list (or cons-cell) = [[nil][x]​]
                        [[value-cell][ptr->cons-cell|nil]​]
                        
