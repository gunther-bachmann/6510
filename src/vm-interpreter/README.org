#+title: README
Implementation of the mil byte code virtual machine
Interpreter, data structures etc.
* TODO take some inspiration from https://github.com/dschmenk/PLASMA#implementation
* TODO look at https://ryansuchocki.github.io/microscheme/documentation
* TODO http://community.schemewiki.org/?scheme-faq-standards
* TODO https://groups.scheme.org/prescheme/1.3/ (see https://www.s48.org/)
* TODO look at
- https://retrocomputing.stackexchange.com/questions/19528/building-a-memory-management-unit-to-expand-the-16bit-address-space
- https://doc.rust-lang.org/book/ch04-01-what-is-ownership.html
- https://google.github.io/comprehensive-rust/ownership/moves-function-calls.html
- https://www.memorymanagement.org/index.html
* garbage collection (ideas)
** reference counting
- lazy deallocation : advantage: deallocating large number of cells will be spread to allocation of new cells
  when reference drops to 0, free once cell and put that cell on a freed cell stack/list
  when this (free) cell is reused, process other cell, referenced by this cell (if so), dec ref count ...
- refcount coalescing : make sure that (predictable) repeated local changes to refcounts will be done once at the end
- don't do refcounting on fresh allocated objects, that will probably live only shortly, do refcounting only if they survive long enough
* interpreter-cells
** general cell structure
#+begin_src dot :file interpreter-cells.png
  digraph {
      bgcolor="#202020"
      node[shape="record",color="gray",fontcolor="gray"]
      edge[color="darkgoldenrod"]

      atomic_cell[label="atomic value cell"]
      symbol_cell[label="atomic symbol index\n idx=0..8191"]
      boolean_cell[label="boolean cell\natomic boolean\n#t, #f"]
      byte_cell[label="byte cell\natomic byte\n0..255"]
      char_cell[label="char cell\natomic char"]
      int_cell[label="int cell\natomic int\n-8191...8192"]
      lref[label="ref\npoints to a another location"]
      nil_ref[label="nil ref\nlist ref @0"]
      cell_ref[label="cell ref\npoints to single cell"]
      list_ref[label="list ref\npoints to cons-cell"]
      float_ref[label="float ref\npoints to float value"]
      narray_ref[label="narray ref\npoints to native array of values"]

      cell1[label="cell"]

      cons_cell[shape="record",label="{cons-cells |{<c0> car-cell|<c1> cdr-cell}}"]
      cons_cell:c0 -> cell[color="gray"]
      cons_cell:c1 -> cell1[color="gray"]

      cell -> lref
      cell -> atomic_cell
      atomic_cell -> boolean_cell
      atomic_cell -> byte_cell
      atomic_cell -> int_cell
      atomic_cell -> char_cell
      atomic_cell -> symbol_cell

      list_ref -> nil_ref
      lref -> narray_ref
      lref -> list_ref
      lref -> float_ref
      lref -> cell_ref
  }
#+end_src

#+RESULTS:
[[file:interpreter-cells.png]]
the type of a reference is defined by a page->type function. each page is populated with one type of elements (either single cells,
cons-cells, floats, or a native array). if there is need to find out the type of a reference, use its upper byte to lookup the type in a
page->type table.
** cell examples
- int cell #x1ff (prefix '01')
  #+begin_src dot :file cell-example.int-cell-1ff.png
    digraph {
      bgcolor="#202020"
      node[shape="record",color="gray",fontcolor="gray"]
      edge[color="gray"]

              val_cons_cell1[label="0|1|...|1|1|1|1|1|1|1|1|1"]
    }
  #+end_src

  #+RESULTS:
  [[file:cell-example.int-cell-1ff.png]]

- symbol cell (indexing symbol #x3C2) (prefix '001')
  #+begin_src dot :file cell-example.symbol-cell-c2.png
    digraph {
      bgcolor="#202020"
      node[shape="record",color="gray",fontcolor="gray"]
      edge[color="gray"]

              val_cons_cell1[label="0|0|1|0|0|0|1|1|1|1|0|0|0|0|1|0"]
    }
  #+end_src

  #+RESULTS:
  [[file:cell-example.symbol-cell-c2.png]]

- boolean cell ~#t~ (prefix '00000000')
  #+begin_src dot :file cell-example.boolean-cell.png
    digraph {
      bgcolor="#202020"
      node[shape="record",color="gray",fontcolor="gray"]
      edge[color="gray"]

              boolean_cell[label="0|0|0|0|0|0|0|0|1|1|1|1|1|1|1|1"]
    }

  #+end_src
  
  #+RESULTS:
  [[file:cell-example.boolean-cell.png]]

- boolean cell ~#f~ (prefix '00000000')
  #+begin_src dot :file cell-example.boolean-cell.false.png
    digraph {
      bgcolor="#202020"
      node[shape="record",color="gray",fontcolor="gray"]
      edge[color="gray"]

              boolean_cell[label="0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0"]
    }

  #+end_src

  #+RESULTS:
  [[file:cell-example.boolean-cell.false.png]]

- char cell 'A' #x41 65 (prefix '00000001')
  #+begin_src dot :file cell-example.char-cell-A.png
    digraph {
      bgcolor="#202020"
      node[shape="record",color="gray",fontcolor="gray"]
      edge[color="gray"]

      v1[label="0|0|0|0|0|0|0|1|0|1|0|0|0|0|0|1"]
    }
  #+end_src

  #+RESULTS:
  [[file:cell-example.char-cell-A.png]]

** pair examples
- pair of values ~(4 . 2)~
  #+begin_src dot :file pair-excamples.of-values.png
    digraph {
      bgcolor="#202020"
      node[shape="record",color="gray",fontcolor="gray"]
      edge[color="gray"]

              val_cons_cell[label="<c0> atomic value '4'|<c1> atomic value '2'"]
        }
  #+end_src

  #+RESULTS:
  [[file:pair-excamples.of-values.png]]

** list examples (cons-cells)
- list of values ~(4 2)~
  #+begin_src dot :file cons-cells.list-of-values.png
    digraph {
      bgcolor="#202020"
      node[shape="record",color="gray",fontcolor="gray"]
      edge[color="gray"]

              val_cons_cell1[label="<c0> atomic value '4'|<c1> list_ref to next cons-cell"]
              val_cons_cell2[label="<c0> atomic value '2'|<c1> nil"]
              val_cons_cell1:c1 -> val_cons_cell2:c0
    }
  #+end_src

  #+RESULTS:
  [[file:cons-cells.list-of-values.png]]

- list of characters ~('h' 'e' 'l' 'l' 'o') \equiv string "hello"~
  #+begin_src dot :file cons-cells.list-of-characters.png
    digraph {
      bgcolor="#202020"
      node[shape="record",color="gray",fontcolor="gray"]
      edge[color="gray"]
              val_cons_cell1[shape="record",label="<c0> atomic value 'h'|<c1> list_ref to next cons-cell"]
              val_cons_cell2[shape="record",label="<c0> atomic value 'e'|<c1> list_ref to next cons-cell"]
              val_cons_cell3[shape="record",label="<c0> atomic value 'l'|<c1> list_ref to next cons-cell"]
              val_cons_cell4[shape="record",label="<c0> atomic value 'l'|<c1> list_ref to next cons-cell"]
              val_cons_cell5[shape="record",label="<c0> atomic value 'o'|<c1> nil"]

              val_cons_cell1:c1 -> val_cons_cell2:c0
              val_cons_cell2:c1 -> val_cons_cell3:c0
              val_cons_cell3:c1 -> val_cons_cell4:c0
              val_cons_cell4:c1 -> val_cons_cell5:c0

    }
  #+end_src

  #+RESULTS:
  [[file:cons-cells.list-of-characters.png]]

* intermediate language(s)
** ideas
- there may be several levels of intermediate languages
  (e.g. mil -> il0 -> il1 -> ... -> byte-code -> ... -> iln-1 -> iln -> assembly)
- byte code should be very compact
  because of memory restrictions, the program size is very important
** byte code is just one il
- qualities
  - compact
    =>
    - common opcodes 1 byte
    - opcodes may trade off complexity (risc) for size (cisc)
  - fast to execute
    =>
    - static resolutions have taken place
    - optimizations have taken place
    - fast decode of common opcodes
    - fast decode of common var-access (e.g. 4 local vars = fast, others slower)
** examples
*** native operation (add, sub)
*** execution of primitive (e.g. car cdr)
*** call runtime
*** call user function
* 6510 considerations
** small memory => compact opcodes
** fast zero page access => equivalent to registers in zp
** small native stack => heap allocated stack frames, native stack used for ?
** fast decode with native 6510 instructions
- useful assembly properties
  - flags
    | flag           | short | bit | description                                                               |
    |----------------+-------+-----+---------------------------------------------------------------------------|
    | Negative       | N     | b7  | Set when an operation results in a negative number                        |
    | Overflow       | V     | b6  | Set when a signed addition or subtraction results in an overflow          |
    | Unused         | â€”     | b5  | This bit of the processor status register is not used                     |
    | Break          | B     | b4  | Set when a BRK instruction is executed                                    |
    | Decimal Mode   | D     | b3  | When set, certain instructions operate in decimal rather than binary mode |
    | Interrupt Mask | I     | b2  | When set, interrupt requests are ignored                                  |
    | Zero           | Z     | b1  | Set when an operation results in a zero                                   |
    | Carry          | C     | b0  | Set when an unsigned addition or subtraction results in an overflow       |
  - flags after loading (e.g. the byte code) (LDA, LDX, LDY)
    N = bit7 of loaded value
    Z = loaded is zero
  - flags after shifting rotating
    - asl
      bit0 = 0
      N = old bit6, new bit7
      Z = zero now?
      C = old bit7
    - lsr
      bit7 = 0
      N = 0
      Z = zero now?
      C = old bit0
    - ror
      bit7 = old C
      N = new bit7 = old C
      Z = zero now?
      C = old bit0
    - rol
      bit0 = old C
      N = old bit6 = new bit7
      Z = zero now?
      C = old bit7
  - flags after and, ora, eor
    just regular N and Z flag
  - flags after bit
    N = bit7
    V = bit6
    Z = mem AND accumulator = zero?
  - flags after compare (cmp, cpx, cpy)
    N = accumulator < operand
    Z = accumulator = operand
    C = accumulator >= operand
  - flags after adc, sbc
    N
    V
    Z
    C
* test programs for the compiler
** hello world (complete)
- define a module
- require symbol from other module (io)
- define function main (no parameters), documentation, body
- execute function call with string parameter
#+begin_src scheme
  (module one)
  (require io hello-world)

  (def (main)
       "prints hello world"
       (write "hello-world\n"))
#+end_src
** fragments
*** constant byte
#+begin_src scheme
  17
#+end_src
- put constant byte on the stack ~(push-immediate-byte 17)~
*** constant boolean
#+begin_src scheme
  #t
#+end_src
- put constant byte on the stack ~(push-immediate-byte $FF)~
*** sum constant
- put two constants into eval position (stack, register)
- execute atomic function (byte+)
#+begin_src scheme
  (byte+ 17 4)
#+end_src
- ~(push-immediate-byte 17)~
- ~(push-immediate-byte 4)~
- ~(byte+)~
*** IGNORE conditional if (can be implemented through cand)
- boolean condition must be evaluated
- only the respective branch is then evaluated
#+begin_src scheme
  (if #t 17 4)
#+end_src
- ~(push-immediate-byte $ff)~
- ~(jump-if-false byte-code-location-false-case)~
  or
  ~(jump-if-true byte-code-location-true-case)~
*** cond
#+begin_src scheme
  (cond (#f (byte+ 1 2))
        (#t (byte+ 2 3)))
#+end_src
- ~(push-immediate-byte $00)~
- ~(jump-if-true byte-code-location-1)~
- ~(push-immediate-byte $ff)~
- ~(jump-if-true byte-code-location-2)~
byte code location following is raising a fall through exception
*** comparison
#+begin_src scheme
  (=? 1 2)
  (!=? 1 2)
  (>? 1 2)
#+end_src
- ~(push-immediate-byte 1)~
- ~(push-immediate-byte 2)~
- ~(equals-byte-p)~
*** conditional if with subexpression
#+begin_src scheme
  (if #t (byte+ 1 2) (byte+ 2 3))
#+end_src
- ~(push-immediate-byte $ff)~
- ~(jump-if-false byte-code-location-false)~
- ~(push-immediate-byte 1)~
- ~(push-immediate-byte 2)~
- ~(byte+)~
- ~(jump byte-code-location-next)~
- byte-code-location-false:
- ~(push-immediate-byte 2)~
- ~(push-immediate-byte 3)~
- ~(byte+)~
- byte-code-location-true:
*** constant list
#+begin_src scheme
  '(1 2)
  (list 1 2)
  nil
  '(nil . nil)     ;; '()
  '(1 . nil)       ;; '(1)
  '(1 . (2 . nil)) ;; '(1 2)
#+end_src
- ~(push-nil-cell)~
- ~(push-byte-cell 2)~
- ~(cons)~
- ~(push-byte-cell 1)~
- ~(cons)~
- optimized to
- ~(push-immediate-byte 2)~
- ~(push-immediate-byte 1)~
- ~(list)~
*** basic list functions
#+begin_src scheme
  (car '(1 2))     ;; 1
  (cdr '(1 2))     ;; '(2)
  (cons 1 '(2))    ;; '(1 2)
  (nil? '())       ;; #f
  (nil? nil)       ;; #t
  (empty? '())     ;; #t
  (empty? nil)     ;; runtime error (list expected)
#+end_src
*** define variable
#+begin_src scheme
  (def var 17)
#+end_src
- (define-top-level-symbol var)
- (push-immediate-byte 17)
- (assign-to var)
*** return two added numbers
- function definition (with intrinsic types)
- execute atomic function
- return result
#+begin_src scheme
  (def (adder (a byte) (b byte))
       "return the sum"
       (byte+ a b))
#+end_src
- ~(define-top-level-symbol adder)~
- ~(push-byte-code-address byte-code-location)~
- ~(assign-to var)~

- byte-code-location:
- ~(assert-locals-n 2)~
- ~(push-local 0)~ ;; a
- ~(push-local 1)~ ;; b
- ~(byte+)~
*** basic list functions
**** IGNORE append (non tail call version)
#+begin_src scheme
  (def (append (a list) (b list))
       "append two lists"
       (if (nil? (car a))
           b
           (cons (car a)
                 (append (cdr a) b))))
#+end_src
**** append (tail call version) if reverse is not implemented using append!!
#+begin_src scheme
  (def (-append (ar list) (b list))
       (if (nil? (car ar))
           b
           (-append (cdr ar)
                    (cons (car ar) b))))

  (def (append (a list) (b list))
       (-append (reverse a) b))
#+end_src
- ~(assert-locals-n 2)~
- byte-code-location-append
- ~(push-local 0)~
- ~(car)~
- ~(nil?)~
- ~(jump-if-false byte-code-location-1)~
- byte-code-location-0
- ~(push-local 1)~
- ~(return)~
- byte-code-location-1
- ~(push-local 0)~
- ~(cdr)~
- ~(push-local 1)~
- ~(push-local 0)~
- ~(car)~
- ~(cons)~
- ~(pop-to-local 0)~
- ~(pop-to-local 1)~
- ~(jump byte-code-location-append)~

- ~(assert-locals-n 2)~
- ~(push-local 1)~
- ~(push-local 0)~
- ~(call reverse)~
- ~(call -append)~
**** IGNORE reverse
#+begin_src scheme
  (def (reverse (a list))
       (if (nil? a)
           a
           (append (reverse (cdr a)) ((car a) . nil ))))
#+end_src
**** reverse (tail call version)
#+begin_src scheme
  (def (-reverse (a list) (acc list))
       (if (nil? (car a))
           acc
           (-reverse (cdr a) (cons (car a) acc))))

  (def (reverse (a list))
       (-reverse a '()))
#+end_src
*** function application
#+begin_src scheme
  (def fn #'byte+)
  (apply fn 1 2)
#+end_src
*** higher order functions
#+begin_src scheme
  (def (map (fn fun) (a list))
       "apply function to each element of the list returning a new list of the results"
       (if (nil? (car a))
           a
           (cons (apply fn (car a)) (map fn (cdr a)))))
#+end_src
*** local variable (through let)
#+begin_src scheme
  (def (some-fun (a list))
       (let (((b list) (list 1 2 3)))
         (if (nil? (car a))
             b
             a)))
#+end_src
