#+title: vm interpreter

* byte code map
|  low |                   |                   |                   |                   |                   |                   |                   |                   |                    |            |                    |             |                    |         |                    |     |
| high | 00                | 01                | 02                | 03                | 04                | 05                | 06                | 07                | 08                 | 09         | 0a                 | 0b          | 0c                 |      0d | 0e                 | 0f  |
|   00 | -                 | BNOP              | BRK               | SWAP              | EXT               | PUSH_B            | PUSH_I            | INT_P             | -                  | PUSH_NIL   | CONS_PAIR_P        | T_P_RET     | T_P_BRA            | F_P_BRA | F_P_RET            | DUP |
|   10 | -                 | POP               | CELL_EQ_P         | F_P_RET_F         | ALLOC_A           | PUSH_AF           | POP_TO_AF         | PUSH_B            | -                  |            |                    |             |                    |         |                    |     |
|   20 | -                 | NIL_P             | I_Z_P              |                   |                   |                   |                   |                   | -                  | NATIVE     |                    |             |                    |         |                    |     |
|   30 | -                 |                   | GOTO              | RET               | CALL              | TAIL_CALL         |                   |                   | -                  |            |                    |             |                    |         |                    |     |
|   40 | -                 |                   | CDR               | CONS              | CAR               | COONS             |                   |                   | -                  |            |                    |             |                    |         |                    |     |
|   50 | -                 |                   |                   |                   |                   |                   |                   |                   | -                  |            |                    |             |                    |         |                    |     |
|   60 | -                 | ISUB              | IADD              | I_GT_P            |                   |                   |                   |                   | -                  |            |                    |             |                    |         |                    |     |
|   70 | -                 |                   |                   |                   |                   |                   |                   |                   | -                  |            |                    |             |                    |         |                    |     |
|   80 | PUSH_L0           | WRITE_L0          | PUSH_L1           | WRITE_L1          | PUSH_L2           | WRITE_L2          | PUSH_L3           | WRITE_L3          | -                  |            |                    |             |                    |         |                    |     |
|   90 | POP_TO_L0         | WRITE_TO_L0       | POP_TO_L1         | WRITE_TO_L1       | POP_TO_L2         | WRITE_TO_L2       | POP_TO_L3         | WRITE_TO_L3       | NIL_P_RET_L0_POP_1 |            | NIL_P_RET_L0_POP_2 |             | NIL_P_RET_L0_POP_3 |         | NIL_P_RET_L0_POP_4 |     |
|   a0 | PUSH_L0_CAR       | PUSH_L0_CDR       | PUSH_L1_CAR       | PUSH_L1_CDR       | PUSH_L2_CAR       | PUSH_L2_CDR       | PUSH_L3_CAR       | PUSH_L3_CDR       | CAAR               |            | CADR               |             | CDAR               |         | CDDR               |     |
|   b0 | GET_ARRAY_FIELD_0 | SET_ARRAY_FIELD_0 | GET_ARRAY_FIELD_1 | SET_ARRAY_FIELD_1 | GET_ARRAY_FIELD_2 | SET_ARRAY_FIELD_2 | GET_ARRAY_FIELD_3 | SET_ARRAY_FIELD_3 | PUSH_INT_0         | PUSH_INT_1 | PUSH_INT_2         | PUSH_INT_m1 |                    |         |                    |     |
|   c0 |                   |                   |                   |                   |                   |                   |                   |                   |                    |            |                    |             |                    |         |                    |     |
|   d0 |                   |                   |                   |                   |                   |                   |                   |                   |                    |            |                    |             |                    |         |                    |     |
|   e0 |                   |                   |                   |                   |                   |                   |                   |                   |                    |            |                    |             |                    |         |                    |     |
|   f0 |                   |                   |                   |                   |                   |                   |                   |                   |                    |            |                    |             |                    |         |                    |     |

should be
                                                              
commands often used and/or short running

|  low |             |             |             |             |              |              |              |             |                    |               |                    |               |                    |               |                    |          |
| high | 00          | 01          | 02          | 03          | 04           | 05           | 06           | 07          | 08                 | 09            | 0a                 | 0b            | 0c                 | 0d            | 0e                 | 0f       |
|------+-------------+-------------+-------------+-------------+--------------+--------------+--------------+-------------+--------------------+---------------+--------------------+---------------+--------------------+---------------+--------------------+----------|
|   00 | -           | NOP         | BRK         | SWAP        | EXT          | PUSH_B       | PUSH_I       | INT_P       | -                  | PUSH_NIL      | CONS_PAIR_P        | T_P_RET       | T_P_BRA            | F_P_BRA       | F_P_RET            | DUP      |
|   10 | -           | POP         | CELL_EQ_P   | F_P_RET_F   | ALLOC_A      | PUSH_AF      | POP_TO_AF    | /WRITE_AF/    | -                  |               |                    |               |                    |               |                    |          |
|   20 | -           | NIL_P       | I_Z_P        | /B0_P/        | /PUSH_L/       | /POP_TO_L/     | /PUSH_AL/      |             | -                  | NATIVE        |                    | /I_Z_P_RET/      | /I_Z_P_BRA/           | /B0_P_BRA/      | /B0_P_RET/           |          |
|   30 | -           |             | GOTO        | RET         | CALL         | TAIL_CALL    |              |             | -                  | /INC_RAI/       | /INC_RBI/            | /INC_RCI/       | /ADD_RAI/            | /ADD_RBI/       | /ADD_RCI/            | /DEC_RAI/  |
|   40 | -           |             | CDR         | CONS        | CAR          | COONS        |              |             | -                  | /WRITE_TO_RAI/  | /POP_TO_RAI/         | /WRITE_TO_RBI/  | /POP_TO_RCI/         | /WRITE_TO_RCI/  | /POP_TO_RCI/         | /DEC_RBI/  |
|   50 | -           | /PUSH_AF_RAI/ | /PUSH_AF_RBI/ | /PUSH_AF_RCI/ | /WRITE_AF_RAI/ | /WRITE_AF_RBI/ | /WRITE_AF_RCI/ |             | -                  | /POP_TO_AF_RAI/ | /WRITE_TO_AF_RAI/    | /POP_TO_AF_RBI/ | /WRITE_TO_AF_RBI/    | /POP_TO_AF_RCI/ | /WRITE_TO_AF_RCI/    | /DEC_RCI/  |
|   60 | -           | ISUB        | IADD        | I_GT_P      | /IMUL/         | /IDIV/         | /IMOD/         | /I_LE_P/      | -                  | /BSUB/          | /BADD/               | /B_GT_P/        | /BMUL/               | /BDIV/          | /BMOD/               | /B_LE_P/   |
|   70 | -           | /I_GE_P/      | /I_LT_P/      | /B_GE_P/      | /B_LT_P/       |              |              |             | -                  |               |                    |               |                    |               |                    |          |
|   80 | PUSH_L0     | WRITE_L0    | PUSH_L1     | WRITE_L1    | PUSH_L2      | WRITE_L2     | PUSH_L3      | WRITE_L3    | -                  |               |                    |               |                    |               |                    |          |
|   90 | POP_TO_L0   | WRITE_TO_L0 | POP_TO_L1   | WRITE_TO_L1 | POP_TO_L2    | WRITE_TO_L2  | POP_TO_L3    | WRITE_TO_L3 | NIL_P_RET_L0_POP_1 |               | NIL_P_RET_L0_POP_2 |               | NIL_P_RET_L0_POP_3 |               | NIL_P_RET_L0_POP_4 |          |
|   a0 | PUSH_L0_CAR | PUSH_L0_CDR | PUSH_L1_CAR | PUSH_L1_CDR | PUSH_L2_CAR  | PUSH_L2_CDR  | PUSH_L3_CAR  | PUSH_L3_CDR | CAAR               |               | CADR               |               | CDAR               |               | CDDR               |          |
|   b0 | PUSH_AF0    | POP_TO_AF0  | PUSH_AF1    | POP_TO_AF1  | PUSH_AF2     | POP_TO_AF2   | PUSH_AF3     | POP_TO_AF3  | PUSH_I0            | PUSH_I1       | PUSH_I2            | PUSH_IM1      | /PUSH_B0/            | /PUSH_B1/       | /PUSH_B2/            | /PUSH_BM1/ |
|   c0 |             |             |             |             |              |              |              |             |                    |               |                    |               |                    |               |                    |          |
|   d0 |             |             |             |             |              |              |              |             |                    |               |                    |               |                    |               |                    |          |
|   e0 |             |             |             |             |              |              |              |             |                    |               |                    |               |                    |               |                    |          |
|   f0 |             |             |             |             |              |              |              |             |                    |               |                    |               |                    |               |                    |          |

extended commands commands seldomly used and long running)

| low  |    |      |      |    |      |      |      |    |    |    |    |    |    |    |    |    |
| high | 00 |   01 |   02 | 03 |   04 |   05 |   06 | 07 | 08 | 09 | 0a | 0b | 0c | 0d | 0e | 0f |
|------+----+------+------+----+------+------+------+----+----+----+----+----+----+----+----+----|
| 00   |  - | IMAX | IINC | GC | /IMIN/ | /BMAX/ | /BMIN/ |    |    |    |    |    |    |    |    |    |

encoding:
- PUSH :: push
- WRITE :: write
- CALL :: call
- _P :: compare/check
- _R ::
- L :: local
- B :: byte
- I :: int
- A :: array
- AF :: array-field
- m1 :: minus 1
- F :: false
- T :: true
- EQ :: equal
- LE :: less or equal
- GE :: greater or equal
- LL :: less
- GG :: greater
- MAX :: maximum

* moldable byte code definition
- definition
  - byte code command
    name, bytecode, routinedefinition, disassembly, size (incl. operands), debugger routine
    - example NOP
      BC_NOP = (list of commands)
      NOP = #x01
      #x01 -> "NOP"
      size = 01
    - example INT-
      BC_ISUB = (list of commands)
      INT_MINUS = #x61
      #x61 -> "INT ~a - ~a" TOS TOSm1
      size = 01
    - example PUSH_B
      BC_PUSH_B = (list of commands)
      PUSH_B = #x05
      #x05 -> "PUSH BYTE ~a" (peek-byte PC+1)
      size = 02
  - enc. byte code command
    name, bytecode, routinedefinition, disassembly, size (incl. operands)
    - example PUSH_LX, WRITE_LX
      BC_PUSH_O_WRITE_LX = (list of commands)
      PUSH_O_WRITE_LX - #x80..#x87
      PUSH_L0=#x80, PUSH_L1= #x82, PUSH_L2=#x84, PUSH_L3=#x86
      WRITE_L0=#x81, WRITE_L1= #x83, WRITE_L2=#x85, WRITE_L3=#x87
      #x80..#x87 -> (see above)
      size 01
  - extended byte code command
    name, bytecode, routinedefinition, disassembly, size (incl. operands), debugger routine
    - example GC
      BC_GC = (list of commands)
      GC = #x04 #x03
      #x04 #x03 -> "GC"
      size = 02
- spread information into
  - VM_INTERPRETER_OPTABLE (byte code and enc. byte code references)
  - define command with byte value
  - define condition for disassembler :: define function to print (parameters are bc, bc_p1, bc_p2, labels
  - define condition for size calculation

* - :noexport:
#+begin_src emacs-lisp
  ;; Local Variables:
  ;; org-pretty-entities-include-sub-superscripts: nil
  ;; End:
  #+end_src
