#+title: persistent data structures
* idea
  - prepare a lecture about persistent data structures
  - show example of debugger going back in history
  - concrete data structures
    - https://en.wikipedia.org/wiki/Hash_array_mapped_trie
    - fat nodes
    - path copies
    - sleater, tarjan: combination of fat nodes and path copies
    - see [[pdfview:~/Downloads/persistent-data-structures.pdf]]
  - advantages
    - thread safe
    - versioning
    - allows for pure functions (output only dependent on immutable input)
      - easier to test
      - easier to reason about
      - easier to debug
  - disadvantages
    - overhead read/write depending on algorithm used
    - performance overhead https://github.com/JohnnyJayJay/persistent-data-structures-benchmark
    - overhead in memory consumption
  - indications when to use
    - code complexity reduction 
    - memory overhead ok (no tiny devices, hard memory restrictions)
    - access time ok
    - thread safety is important w/o blocking mutexes
    - undo / redo (keep multiple versions)
  - indications when not to use
    - single threaded (thread safety is no restriction)
    - efficiency (very) important
    - restricted computing environment (tiny devices etc.)
  - example libraries for programming languages
* uses of persistent data structures (immutable)
* persistent data structure libraries
  | Python                 | https://github.com/halgari/clojure-py                                                       |
  | -                      | https://github.com/tobgu/pyrsistent                                                         |
  | Haskell's HAMT library | http://hackage.haskell.org/package/unordered-containers                                     |
  | Java                   | https://code.google.com/p/pcollections/                                                     |
  | C++                     | https://github.com/arximboldi/immer                                                         |
  | C#                     | http://www.itu.dk/research/c5/                                                              |
  | -                      | https://github.com/6gales/persistent-data-structure                                         |
  | JavaScript             | https://github.com/isaacbw/immutable-collections/                                           |
  | -                      | https://github.com/swannodette/mori                                                         |
  | Racket                 | pvector                                                                                    |
  | Kotlin                 | https://github.com/Kotlin/kotlinx.collections.immutable                                     |
  | Clojure                | http://clojure.org/data_structures                                                          |
  | Scala                  | http://docs.scala-lang.org/overviews/collections/concrete-immutable-collection-classes.html |
  | Ruby                   | https://github.com/hamstergem/hamster                                                       |
  | Java                   | http://pcollections.org/                                                                    |

* references
  - https://cstheory.stackexchange.com/questions/1539/whats-new-in-purely-functional-data-structures-since-okasaki
  - https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-854j-advanced-algorithms-fall-2005/lecture-notes/persistent.pdf
  - https://kostyukov.net/posts/designing-a-pfds/
  - http://www.cs.cmu.edu/~rwh/theses/okasaki.pdf
  - https://en.wikipedia.org/wiki/Persistent_data_structure
  - http://www.toves.org/books/persist/
  - http://www.allitebooks.com/learning-f-functional-data-structures-and-algorithms/
  - http://www.allitebooks.com/clojure-data-structures-and-algorithms-cookbook/
  - http://fox.ucw.cz/papers/thesis/thesis.pdf
  - https://coderprog.com/advanced-functional-data-structures-algorithms/
  - [[pdfview:/home/pe/Downloads/vdoc.pub_handbook-of-data-structures-and-applications.pdf::624++0.00][20220813 19:59 - vdoc.pub_handbook-of-data-structures-and-applications : 624]]
