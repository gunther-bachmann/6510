#+title: TODO
list of todo items, prioritized and elaborated
goal: have precise stories to work on and complete
* Descriptions
** MIL Runtime
create a set of functions (6510 code) that will allow a MIL Interpreter (or compiled MIL code) to execute this includes
implement minimal set first
*** Memory Managment
- garbage collection/or explicit allocation/deallocation
- memory layout
- allocation/deallocation/collection of basic data structures
*** basic data structures + operations
- *byte*
- int
- *char* (is a byte?)
- *string* (is an array of char?)
- float
- *cells* (cons-cells)
- *lists*
- arrays
- maps
*** input/output
- write data (basic data structures) to *screen*, tape, disc, printer ??
- read data (basic data structure ) from *keyboard*, tape, disc ??
** Virtual Machine
implement a stack machine with byte code to execute basic MIL functions
First implementation will be a simple interpreter loop [fetchen, decode, execute]
*** instructions
e.g.
- push basic data
- call runtime function (MIL Runtime is in place)
- call user function
*** calling conventions (call frames)
*** resolving names
- user names
- runtime names
- scoping
* Research
see [[file:~/mil.readlist.org::*literature][literature]]
** movable memory (=> additional indirection on access)
using a memory extension that can page in a memory page at some address (in some range) could be used without code adjustments, if the
access to memory would be redirected from virtual page -> actual address.  this indirect access could be utilized for certain accesses.  it
would be nice if this access still allows for quick access if the access is repeatedly done (e.g. jit to replace indirect access w/ direct
access, while undoing this, once the page is swapped out again).  this indirect access is optional and does not incur runtime penalties for
direct access!
** requirements of continuation on call-frame, resolving names, garbage collection, memory ownership
** look at other intermediate compiler languages of functional languages
- e.g. guile scheme (https://www.gnu.org/software/guile/manual/html_node/Guile-Implementation.html)
- macscheme https://web.archive.org/web/20101210181945/http://larceny.ccs.neu.edu/doc/larceny-notes.html
* References
** debugging
- debugging standard :: https://dwarfstd.org/
** scheme doc
https://github.com/schemedoc/bibliography/blob/master/page8.md
* Epic
** OBSOLETE allocate/deallocate page (type)
(obsolete since this will be implemented with the mil vm interpreter)
- allocate a page of a certain type (e.g. *stack-page*, *code*, *byte/char-array*, *cell-pair/list-page*, *cell page*, float page, int page)
- keep a free-list / used-list (per type)
- free a page
- allow introspection of pages
- define layout and access to page types
** naming conventions
ZP_ <- on zero page
functions have a verb (what they do, e.g. ALLOC​_PAGE​_TO​_A)
functions define main return register
register available are A, X, Y (as cpu registers), and vm registers RT RA
parameters for functions are passed through registers A/X/Y or use vm resources like the registers, stack, call-frame stack etc.
each function defines which cpu resources and/or vm resources are used during execution (including transitively called functions)
=> only the most basic functions don't use all cpu resources

e.g. INC​_REFCNT​_CELL​_RT, WRITE​_EVLSTK​_TOS​_CELL​_TO​_RT, POP​_EVLSTK​_TOS​_CELL​_TO​_RT
VERB - TYPE - OBJECT

- *nouns*
  ARR       :: array
  BOOL      :: boolean (0/1)
  BYTE      :: byte (0..255 | -128..127)
  CELL      :: cell
  CELLARR   :: cell-array (is a vslot)
  CELLPAIR  :: cell-pair
  CELLy     :: cell at y of either cell-array or cell-pair (depending on context), y = 0, 2, 4 ... <- actual offset
  CONST     :: constants
  EVLSTK    :: cell eval stack (without RT!)
  FL        :: free list <- list of free elements (pages, cells, cell-pairs, cell-arrays)
  FRMSTK    :: frame stack
  GFL       :: global freelist
  GLOBALy   :: global cell slot y-register (0,2,4 ...)
  INT       :: integer (0..8191 | -4096..4095)
  LIST      :: linked cell-pairs forming a  list (car element = value, cdr elment = ptr to next pair)
  LOCALy    :: function local cell slot y-register (0,2,4,6 ...)
  M1Px      :: m1 page of profile x (can be register x)
  NARR      :: native (byte) array
  NIL       :: nil
  PAGE      :: page
  PFL       :: page freelist (local within page)
  REFCNT    :: refcount
  RT        :: register extending cell eval stack, making it the real TOS
  Rx        :: register (x = T | A | B ...)
  SLOT      :: allocation unit within a page (CELL, CELLPAIR, VSLOT is a SLOT)
  TOSmr     :: top of stack - r (can be a constant or a register)
  VSLOT     :: slot of (initially) variable size, allocated to one profile of m1-px pages

- *verbs*
  ADD       :: add
  ALLOC     :: allocate
  COPY      :: copy
  DEC       :: decrement
  EVICT     :: remove (from within a stack)
  FREE      :: free
  GC        :: garbage collect
  INC       :: increment
  INIT      :: initialize
  POP       :: pop
  PUSH      :: push
  READ      :: read
  REM       :: remove
  RET       :: return
  REUSE     :: reuse
  WRITE     :: write

- *attributes*
  FIRST     :: first

** memory management
- free lists always use memory-sections of the element itself to provide the structure needed (no additional memory is used)
*** atoms for memory management
- {allocate|free} page
  ALLOC​_PAGE​​_TO​_A, FREE​_PAGE​_A, FREE​_PAGE​_RT
- {add|remove} page to {cell|cell-pair|m1-px} free-list
  ADD​_CEL​_PAGE​_a​_TO​_FL
- initialize page for type {cell|cell-pair|m1-px...}
  INIT​_CEL​_PAGE​_a, INIT​_CELPAR​_PAGE​_a, INIT​_M1Px​_PAGE​_a (use x register as profile, a as page id)
- {add|remove} {cell|cell-pair|vslot} to/from free-list of page
  ADD​_CEL​_RT​_TO​_PAGE​_FL
- {add|remove|reuse|return-to-page} cell to/from global free list
  ADD​​_CEL​_RT​_TO​_FL
- {add|remove|reuse|return-to-page|inc-gc} cell-pair to/from global free list
  ADD​​_CELPAR​_RT​_TO​_FL
- {add|remove|reuse|return-to-page|inc-gc} cell-array to/from global free list
  ADD​​_CELARR​_RT​_TO​_FL
- {push|pop|read|write} cell on/from/to stack
  PUSH​_RT​_ON​_EVLSTK, POP​_FROM​_EVLSTK​, WRITE​_TOSmx​_TO​_RT
- {dec|inc} refcount on {cell|cell-pair|vslot}
  INC​_REFCNT​_RT, INC​_REFCNT​_CELL​_RT
*** cells
- allocate page for cells
- allocate cells on page
- free cells into free list
- reuse cell from free-list
- free cells on page
- free cell page
- inc/dec refcount
- gc run
*** cell-pairs
- allocate page for cell-pairs
- allocate cell-pairs on page
- free cell-pairs into free list
- reuse cell-pair from free list
- free cell-pairs on page
- free cell-pair page
- inc/dec refcount
- gc run
*** cell-arrays
- allocate page for cell-arrays
- allocate cell-arrays on page
- free cell-arrays into free list
- reuse cell-array from free list
- free cell-arrays on page
- free cell-array (m1) page
- inc/dec refcount
- gc run
*** define byte code operations w/ atoms for mm (and other atoms)
**** complex mm atoms
- ALLOC​_CELPAR​_TO​_RA
  GFL​_CELPAR​​_EMPTY?
    CELPAR​_PAGE​_LIST​_HEAD​_EMPTY?
      ALLOC​_PAGE
      INIT​_PAGE​_FOR​_CELPAR
    REM​_CELPAR​_PFL​_TO​_RA
  ELSE
    REM​_CELPAR​_GFL​_TO​_RA
- FREE​_CELPAR​_RT
  WRITE​_CELy​_RT​_TO​_RA ;; y=0 = car-cell
  ADD​_CELPAR​_RT​_TO​_GFL
  tailcall FREE​_CEL​_RA
- FREE​_CEL​_RT
  ADD​_CEL​_RT​_TO​_GFL
- FREE​_CELARR​_RT
  GET​_LEN​_CELARR​_RT​_TO​_y
  WRITE​_CELLy​_CELARR​_RT​_TO​_RA  <-- 1
  IS​_RA​_PTR?
    DEC​_y
    WRITEy​_TO​_CELARR​_LEN
    ADD​_CELARR​_RT​_TO​_GFL
    DEC​_REFCNT​_RA    ;; might result in gc
  ELSE
    DEC​_y
    >0 LOOP --> 1
    WRITEy​_TO​_CELARR​_LEN
    ADD​_CELARR​_RT​_TO​_GFL
**** INT+
ADD​_INT​_RT​_TOSm1​_TO​_RT
EVICT​_TOSm1​_FROM​_EVLSTK
**** CONS
ALLOC​_CELPAR​_TO​_RA
WRITE​_RT​_TO​_CELy​_RA
WRITE TOSm1​_TO​_CELy​_RA
EVICT​_TOSm1​_FROM​_EVLSTK
WRITE​_RA​_TO​_RT
INC​_REFCNT​_RT
** output a string
e.g. ~(displayln "hello world")~
*** stories
**** vm-interpreter
***** memory manage strings
- bootstrap code (program startup)
- constant strings / array of char => byte/char-array-page
***** code as list of vm-instructions
- give translation of (display "some string") in vm instructions
***** runtime method to write string to the screen
***** fetch, decode, execute
- for all vm instructions necessary to do hello word
